<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- zhu[zhu]SQLMapper自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2018-05-29 08:52:57 -->
<mapper namespace="dao.ZhuDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="po.ZhuPO">
		INSERT INTO zhu (
		<if test="name_ != null and name_ != ''">
	         name_, <!-- 名称 -->
		</if>
		<if test="age_ != null">
	         age_, <!-- 年龄 -->
		</if>
		<if test="sex_ != null and sex_ != ''">
	         sex_, <!-- 性别 -->
		</if>
		<if test="id_ != null and id_ != ''">
	          id_  <!-- ID -->
	   </if>
		)VALUES(
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- 名称 -->
	    </if>
		<if test="age_ != null">
	          #{age_, jdbcType=INTEGER}, <!-- 年龄 -->
	    </if>
		<if test="sex_ != null and sex_ != ''">
	          #{sex_, jdbcType=VARCHAR}, <!-- 性别 -->
	    </if>
		<if test="id_ != null and id_ != ''">
		     #{id_, jdbcType=VARCHAR}  <!-- ID -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="po.ZhuPO">
		INSERT INTO zhu (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=VARCHAR},  <!-- ID -->
		    #{name_, jdbcType=VARCHAR},  <!-- 名称 -->
		    #{age_, jdbcType=INTEGER},  <!-- 年龄 -->
		    #{sex_, jdbcType=VARCHAR}  <!-- 性别 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="po.ZhuPO">
		UPDATE zhu
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=VARCHAR},  <!-- ID -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- 名称 -->
			</if>
			<if test="age_ != null">
		          age_ = #{age_, jdbcType=INTEGER},  <!-- 年龄 -->
			</if>
			<if test="sex_ != null">
		          sex_ = #{sex_, jdbcType=VARCHAR},  <!-- 性别 -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM zhu WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="po.ZhuPO">
		SELECT
		<include refid="column" />
		FROM zhu WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="po.ZhuPO">
		SELECT
		    <include refid="column" />
		FROM zhu
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="po.ZhuPO">
		SELECT
			<include refid="column" />	
		FROM zhu
		<where>
		    <include refid="equal" />
		</where>
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="po.ZhuPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM zhu
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="po.ZhuPO">
		SELECT
			<include refid="column" />	
		FROM zhu
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="po.ZhuPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM zhu
		<where>
		    <include refid="like" />
		</where>	
		
		
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM zhu
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM zhu
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- ID -->
		  name_,  <!-- 名称 -->
		  age_,  <!-- 年龄 -->
		  sex_  <!-- 性别 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  zhu.id_,  <!-- ID -->
		  zhu.name_,  <!-- 名称 -->
		  zhu.age_,  <!-- 年龄 -->
		  zhu.sex_  <!-- 性别 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="id_ != null and id_ != ''">
		      AND id_ = #{id_}  <!-- ID -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- 名称 -->
		</if>
	   <if test="age_ != null ">
		      AND age_ = #{age_}  <!-- 年龄 -->
		</if>
	    <if test="sex_ != null and sex_ != ''">
		      AND sex_ = #{sex_}  <!-- 性别 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="id_ != null and id_ != ''">
		      AND id_ like '%${id_}%'  <!-- ID -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- 名称 -->
		</if>
	    <if test="sex_ != null and sex_ != ''">
		      AND sex_ like '%${sex_}%'  <!-- 性别 -->
		</if>
	</sql>
	
</mapper>